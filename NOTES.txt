!---------------
! HTTP Verbs
!---------------

What is a web server?

It has many defitions:
- hardware
- software designed to accept incoming web requests
- For example, Google has many web servers
- Whenever we go to http://www.google.com in our browser, we send something to a web server

What do we send?

- When you go to http://www.google.com, you send the following:

GET / HTTP / 1.1
Host: www.google.com

- This is called a GET request
- The server then sees GET / HTTP/1.1
- GET is the verb, / is the path, HTTP is the protocol
- The server sees that, and then there's code. The code may interpret the GET request in many different ways

For example
- It may give you an error, if / is not found
- It may give you an error, if HTTP is not supported.
- It may give you an error, if the server is unavailable.
- It may give you HTML code back (which is what it normally does)
- It may give you some text back.
- It may give you nothing back.

What else?

- Going to a page will always do a GET
- But there are many other things we can do, such as POST, DELETE, PUT, OPTIONS, HEAD, and much more
- Each server responds differently to each, but they normally have the same meaning in each.

HTTP Verbs (Common meaning)

Verb    Meaning                         Example
GET     Retrieve Something              GET /item/1
POST    Receive data, and use it        POST /item
PUT     Make sure something is there    PUT /item
DELETE  Remove Something                DELETE /item/1


!-------------------
! Rest Principles
!------------------

What is a REST API?

- It is a way of thinking about how a web server responds to your requests.
- It doesn't respond with just data
- It responds with resources

Resources:

- Similar to object-oriented programming
- Think of the server as having resources, and each is able to interact with the pertinent request.

Stateless

- Another key feature is that REST is supposed to be stateless
- This means one request cannot depend on any other requests
- The server only knows about the current request, and not any previous requests.

Example:

- POST /item/chair creates an item
- The server does not know the item now exists
- GET /item/chair then goes to the database and checks to see if the item is there.
- To get an item you do not need to have created an item before - the item could be in the database from previously

Another Example

- A user logs in to a web application
- The web server does not know the user is logged in (since it does not remember any state)
- What do we do?
- The web application must send enough data to identify the user in every request, or else the server won't associate the request with the user.
